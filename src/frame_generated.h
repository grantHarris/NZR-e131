// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FRAME_FRAME_H_
#define FLATBUFFERS_GENERATED_FRAME_FRAME_H_

#include "flatbuffers/flatbuffers.h"

namespace Frame {

struct Pixel;

struct Frame;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Pixel FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t r_;
  int8_t g_;
  int8_t b_;

 public:
  Pixel() {
    memset(this, 0, sizeof(Pixel));
  }
  Pixel(int8_t _r, int8_t _g, int8_t _b)
      : r_(flatbuffers::EndianScalar(_r)),
        g_(flatbuffers::EndianScalar(_g)),
        b_(flatbuffers::EndianScalar(_b)) {
  }
  int8_t r() const {
    return flatbuffers::EndianScalar(r_);
  }
  int8_t g() const {
    return flatbuffers::EndianScalar(g_);
  }
  int8_t b() const {
    return flatbuffers::EndianScalar(b_);
  }
};
FLATBUFFERS_STRUCT_END(Pixel, 3);

struct Frame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PIXELS = 4
  };
  const flatbuffers::Vector<const Pixel *> *pixels() const {
    return GetPointer<const flatbuffers::Vector<const Pixel *> *>(VT_PIXELS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PIXELS) &&
           verifier.Verify(pixels()) &&
           verifier.EndTable();
  }
};

struct FrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pixels(flatbuffers::Offset<flatbuffers::Vector<const Pixel *>> pixels) {
    fbb_.AddOffset(Frame::VT_PIXELS, pixels);
  }
  explicit FrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FrameBuilder &operator=(const FrameBuilder &);
  flatbuffers::Offset<Frame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Frame>(end);
    return o;
  }
};

inline flatbuffers::Offset<Frame> CreateFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const Pixel *>> pixels = 0) {
  FrameBuilder builder_(_fbb);
  builder_.add_pixels(pixels);
  return builder_.Finish();
}

inline flatbuffers::Offset<Frame> CreateFrameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Pixel> *pixels = nullptr) {
  return Frame::CreateFrame(
      _fbb,
      pixels ? _fbb.CreateVectorOfStructs<Pixel>(*pixels) : 0);
}

inline const Frame::Frame *GetFrame(const void *buf) {
  return flatbuffers::GetRoot<Frame::Frame>(buf);
}

inline const Frame::Frame *GetSizePrefixedFrame(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Frame::Frame>(buf);
}

inline bool VerifyFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Frame::Frame>(nullptr);
}

inline bool VerifySizePrefixedFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Frame::Frame>(nullptr);
}

inline void FinishFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Frame::Frame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Frame::Frame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Frame

#endif  // FLATBUFFERS_GENERATED_FRAME_FRAME_H_
